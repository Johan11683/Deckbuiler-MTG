import Deck from "../models/Deck.js";

// üü¢ Cr√©er un deck li√© au user
export const createDeck = async (req, res) => {
  try {
    const { name } = req.body;
    if (!name || name.trim() === "") {
      return res.status(400).json({ message: "Nom du deck requis" });
    }

    const deck = new Deck({
      name: name.trim(),
      user: req.userId, // üóùÔ∏è req.userId inject√© par authMiddleware
      cards: [],
    });

    await deck.save();
    res.status(201).json(deck);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// üü¢ R√©cup√©rer les decks de l‚Äôutilisateur connect√©
export const getDecks = async (req, res) => {
  try {
    const decks = await Deck.find({ user: req.userId });
    res.json(decks);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// üü¢ Supprimer un deck
export const deleteDeck = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await Deck.findOneAndDelete({ _id: id, user: req.userId });

    if (!deleted) {
      return res.status(404).json({ message: "Deck introuvable ou non autoris√©" });
    }

    res.json({ message: "Deck supprim√© avec succ√®s" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};
